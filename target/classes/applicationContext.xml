<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           ">

    <context:property-placeholder location="classpath:jdbc.properties" />

    <!--  Druid连接池    -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--  基本配置 -->
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <!--  配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.init}"></property>
        <property name="minIdle" value="${jdbc.minIdle}"></property>
        <property name="maxActive" value="${jdbc.maxActive}"></property>
        <!-- 配置获取连接等待超时的时间  -->
        <property name="maxWait" value="60000"></property>
        <!-- 配置间隔多久才能进行一次检测，检测需要关闭的空闲连接，单位是毫秒  -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"></property>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒  -->
        <property name="minEvictableIdleTimeMillis" value="300000"></property>
    </bean>

    <!-- 配置SqlSessionFactory  -->
    <!-- 定义工厂bean：生成SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--  注入连接池-->
        <property name="dataSource" ref="dataSource"></property>

        <!-- 分页  -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!--                    <property name="properties">-->
                    <!--                        &lt;!&ndash;  页号调整到合理的值  &ndash;&gt;-->
                    <!--                        <props>-->
                    <!--                            <prop key="reasonable">true</prop>-->
                    <!--                            <prop key="dialect">mysql</prop>-->
                    <!--                        </props>-->
                    <!--                    </property>-->
                    <property name="properties">
                        <props>
                            <prop key="reasonable">true</prop>
                        </props>
                    </property>
                </bean>
            </array>
        </property>

        <property name="mapperLocations">
            <list>
                <value>classpath:com/my/dao/*.xml</value>
            </list>
        </property>



        <!--  为dao-mapper文件中实体 定义缺省包路径 -->
        <property name="typeAliasesPackage" value="com.my.entity"></property>

    </bean>

    <!-- mapperScannerConfigurer    UserDao==>userDao   -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.my.dao"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!--   Service -->
    <!-- <bean id="userService" class="com.my.service.UserServiceImpl">
         <property name="userDao" ref="userDao"></property>
     </bean>
 -->
    <!--    引入一个事务管理器，其中依赖DataSource，借以获得连接，进而控制事务逻辑   -->
    <bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--    配置事务通知   -->
    <!--    <tx:advice id="txManager" transaction-manager="tx">
            <tx:attributes>
                &lt;!&ndash; rollback-for=Exception所有错误都会回滚   &ndash;&gt;
                <tx:method name="delete" rollback-for="Exception"/>
                &lt;!&ndash; propagation=SUPPORTS不开启新事物适合查询，默认值REQUIRED适合增删改  &ndash;&gt;
                <tx:method name="select*" propagation="SUPPORTS" />
            </tx:attributes>
        </tx:advice>-->

    <!--  编制   -->
    <!--<aop:config>
        <aop:pointcut id="pc" expression="execution(* com.my.service.UserServiceImpl.*(..))"/>
        &lt;!&ndash;  组织切面  &ndash;&gt;
        <aop:advisor advice-ref="txManager" pointcut-ref="pc"></aop:advisor>
    </aop:config>-->

    <!--  告知Spring 哪些包中有被注解的类、属性、方法 -->
    <context:component-scan base-package="com.my" use-default-filters="true">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--  @Transactional定制事务时 基于的事务管理器  -->
    <tx:annotation-driven transaction-manager="tx" />

    <!--  启用aop注解  -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
</beans>